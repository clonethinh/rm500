<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EM9190 Monitoring</title>
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap');

    :root {
        --primary-color: #6366f1; /* Indigo-500 */
        --secondary-color: #8b5cf6; /* Violet-400 */
        --accent-color: #06b6d4; /* Cyan-500 */
        --success-color: #10b981; /* Emerald-500 */
        --warning-color: #f59e0b; /* Amber-500 */
        --error-color: #ef4444; /* Red-500 */

        /* Light Mode Variables */
        --light-bg-primary: #f8fafc; /* White-ish */
        --light-bg-secondary: #e2e8f0; /* Gray-200 */
        --light-bg-card: #ffffff; /* White */
        --light-text-primary: #0f172a; /* Dark Gray */
        --light-text-secondary: #475569; /* Medium Gray */
        --light-text-muted: #64748b; /* Light Gray */
        --light-border-color: #cbd5e1; /* Gray-300 */
        --light-shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --light-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --light-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --light-shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

        /* Dark Mode Variables */
        --dark-bg-primary: #0f172a; /* Very Dark Blue */
        --dark-bg-secondary: #1e293b; /* Dark Blue */
        --dark-bg-card: #334155; /* Slate Gray */
        --dark-text-primary: #f8fafc; /* White */
        --dark-text-secondary: #cbd5e1; /* Light Gray */
        --dark-text-muted: #94a3b8; /* Medium Gray */
        --dark-border-color: #475569; /* Medium Dark Gray */
        --dark-shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --dark-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --dark-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --dark-shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

        --shadow-sm: var(--dark-shadow-sm);
        --shadow-md: var(--dark-shadow-md);
        --shadow-lg: var(--dark-shadow-lg);
        --shadow-xl: var(--dark-shadow-xl);

        --bg-primary: var(--dark-bg-primary);
        --bg-secondary: var(--dark-bg-secondary);
        --bg-card: var(--dark-bg-card);
        --text-primary: var(--dark-text-primary);
        --text-secondary: var(--dark-text-secondary);
        --text-muted: var(--dark-text-muted);
        --border-color: var(--dark-border-color);
    }

    [data-theme="light"] {
        --bg-primary: var(--light-bg-primary);
        --bg-secondary: var(--light-bg-secondary);
        --bg-card: var(--light-bg-card);
        --text-primary: var(--light-text-primary);
        --text-secondary: var(--light-text-secondary);
        --text-muted: var(--light-text-muted);
        --border-color: var(--light-border-color);
        --shadow-sm: var(--light-shadow-sm);
        --shadow-md: var(--light-shadow-md);
        --shadow-lg: var(--light-shadow-lg);
        --shadow-xl: var(--light-shadow-xl);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background: var(--bg-primary);
        color: var(--text-primary);
        min-height: 100vh;
        line-height: 1.6;
        overflow-x: hidden;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background:
            radial-gradient(circle at 20% 30%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 40% 80%, rgba(6, 182, 212, 0.1) 0%, transparent 50%);
        pointer-events: none;
        z-index: -1;
    }

    [data-theme="light"] body::before {
         background:
            radial-gradient(circle at 20% 30%, rgba(99, 102, 241, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(139, 92, 246, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 40% 80%, rgba(6, 182, 212, 0.05) 0%, transparent 50%);
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    .header {
        text-align: center;
        margin-bottom: 3rem;
        position: relative;
    }

    .header h1 {
        font-size: 3rem;
        font-weight: 700;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        text-shadow: 0 0 30px rgba(99, 102, 241, 0.3);
    }

    .header::after {
        content: '';
        position: absolute;
        bottom: -1rem;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border-radius: 2px;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 600;
        font-size: 0.875rem;
        margin-top: 1rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }

    .status-badge::before {
        content: '';
        width: 8px;
        height: 8px;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    .status-connected {
        background: rgba(16, 185, 129, 0.2);
        color: var(--success-color);
    }

    .status-connected::before {
        background: var(--success-color);
    }

    .status-disconnected {
        background: rgba(239, 68, 68, 0.2);
        color: var(--error-color);
    }

    .status-disconnected::before {
        background: var(--error-color);
    }

    .status-loading {
        background: rgba(245, 158, 11, 0.2);
        color: var(--warning-color);
    }

    .status-loading::before {
        background: var(--warning-color);
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .card {
        background: var(--bg-card);
        backdrop-filter: blur(10px);
        border: 1px solid var(--border-color);
        border-radius: 20px;
        padding: 2rem;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-xl);
        border-color: rgba(99, 102, 241, 0.3);
    }

    .card h3 {
        color: var(--text-primary);
        margin-bottom: 1.5rem;
        font-size: 1.25rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    /* --- SỬA ĐỔI CHO ICON --- */
    .card h3::before {
        content: attr(data-icon);
        font-size: 1.5rem;
        /* Bỏ gradient và dùng màu theo theme */
        color: var(--primary-color); /* Đặt màu tím làm mặc định */
        background: none;
        -webkit-background-clip: initial;
        background-clip: initial;
        /* Có thể thêm text-shadow cho đẹp hơn */
        text-shadow: 0 0 10px rgba(99, 102, 241, 0.5); /* Màu tím */
        transition: color 0.3s ease, text-shadow 0.3s ease;
    }

    /* Thay đổi màu icon khi hover */
    .card:hover h3::before {
        color: var(--secondary-color); /* Màu tím đậm hơn */
        text-shadow: 0 0 15px rgba(139, 92, 246, 0.7);
    }

    /* Tùy chỉnh màu icon cho chế độ sáng */
    [data-theme="light"] .card h3::before {
        color: var(--primary-color); /* Giữ màu tím hoặc đổi sang màu khác nếu muốn */
        text-shadow: 0 0 10px rgba(99, 102, 241, 0.5); /* Màu tím */
    }

    [data-theme="light"] .card:hover h3::before {
        color: var(--secondary-color); /* Màu tím đậm hơn */
        text-shadow: 0 0 15px rgba(139, 92, 246, 0.7);
    }
    /* ------------------------ */

    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding: 0.75rem;
        background: rgba(15, 23, 42, 0.3); /* Placeholder, will adjust for theme */
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.05); /* Placeholder, will adjust for theme */
        transition: all 0.3s ease;
    }

    [data-theme="light"] .info-row {
        background: rgba(226, 232, 240, 0.5); /* Light theme background */
        border-color: rgba(201, 203, 208, 0.3); /* Light theme border */
    }

    .info-row:hover {
        background: rgba(15, 23, 42, 0.5); /* Placeholder, will adjust for theme */
        border-color: rgba(99, 102, 241, 0.2);
    }

    [data-theme="light"] .info-row:hover {
        background: rgba(226, 232, 240, 0.7); /* Light theme hover background */
        border-color: rgba(99, 102, 241, 0.2);
    }

    .info-row:last-child {
        margin-bottom: 0;
    }

    .info-label {
        font-weight: 500;
        color: var(--text-secondary);
        font-size: 0.875rem;
    }

    .info-value {
        color: var(--text-primary);
        font-family: 'JetBrains Mono', monospace;
        font-weight: 500;
        text-align: right;
    }

    .signal-bars {
        display: flex;
        align-items: end;
        gap: 4px;
        height: 30px;
    }

    .signal-bar {
        width: 10px;
        background: rgba(148, 163, 184, 0.3);
        border-radius: 3px;
        transition: all 0.3s ease;
    }

    .signal-bar:nth-child(1) { height: 6px; }
    .signal-bar:nth-child(2) { height: 12px; }
    .signal-bar:nth-child(3) { height: 18px; }
    .signal-bar:nth-child(4) { height: 24px; }
    .signal-bar:nth-child(5) { height: 30px; }

    .signal-bar.active {
        background: linear-gradient(135deg, var(--success-color), var(--accent-color));
        box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
    }

    .signal-strength {
        margin-left: 1rem;
        font-weight: 600;
        color: var(--success-color);
    }

    .refresh-btn {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 1rem 2rem;
        border-radius: 50px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }

    .refresh-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
    }

    .refresh-btn:hover::before {
        left: 100%;
    }

    .refresh-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .refresh-btn:active {
        transform: translateY(0);
    }

    .band-info {
        background: rgba(15, 23, 42, 0.5); /* Placeholder, will adjust for theme */
        padding: 0.75rem;
        border-radius: 8px;
        margin: 0.25rem 0;
        font-family: 'JetBrains Mono', monospace;
        border: 1px solid rgba(99, 102, 241, 0.2);
        font-size: 0.875rem;
    }

    [data-theme="light"] .band-info {
        background: rgba(226, 232, 240, 0.5); /* Light theme background */
        border-color: rgba(99, 102, 241, 0.15); /* Light theme border */
    }

    .mode-5g {
        color: var(--error-color);
        font-weight: 600;
        text-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
    }

    .mode-lte {
        color: var(--accent-color);
        font-weight: 600;
        text-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
    }

    /* --- Phần TỰ ĐỘNG LÀM MỚI ĐÃ BỊ ẨN --- */
    .auto-refresh {
        display: none !important; /* Ẩn vĩnh viễn */
    }
    /* ------------------------------------------ */

    /* --- Điều chỉnh vị trí của theme-toggle --- */
    .theme-toggle {
        position: fixed;
        top: 2rem;
        right: 2rem; /* Đặt chế độ tối ở góc phải nhất */
        background: var(--bg-card); /* Adjust for theme */
        backdrop-filter: blur(10px);
        padding: 0.75rem 0.8rem; /* Điều chỉnh padding */
        border-radius: 15px;
        border: 1px solid var(--border-color); /* Adjust for theme */
        box-shadow: var(--shadow-lg);
        z-index: 1000;
        cursor: pointer;
        display: flex; /* Sử dụng flexbox */
        align-items: center; /* Căn giữa theo chiều dọc */
        gap: 0.4rem; /* Giảm khoảng cách */
        transition: all 0.3s ease;
        white-space: nowrap; /* Quan trọng: Ngăn chữ bị xuống dòng */
    }

    [data-theme="light"] .theme-toggle {
        background: rgba(255, 255, 255, 0.8);
        border-color: var(--light-border-color);
    }

    .theme-toggle:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-xl);
    }

    .theme-toggle .icon {
        font-size: 1.2rem;
        flex-shrink: 0; /* Ngăn icon bị co lại */
    }

    /* Nếu có một phần tử bao bọc cho icon và chữ, hãy đảm bảo nó cũng xử lý như flex */
    .theme-toggle > div {
        display: flex;
        align-items: center;
        white-space: nowrap;
    }

    /* --- Responsive Design --- */
    @media (max-width: 768px) {
        .container {
            padding: 1rem;
        }

        .header h1 {
            font-size: 2rem;
        }

        .grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .card {
            padding: 1.5rem;
        }

        /* --- Điều chỉnh cho màn hình nhỏ --- */
        .auto-refresh, .theme-toggle {
            position: static; /* Hủy bỏ position: fixed */
            margin-left: auto;  /* Căn giữa */
            margin-right: auto; /* Căn giữa */
            margin-bottom: 2rem; /* Thêm khoảng cách bên dưới */
            max-width: 300px; /* Giới hạn chiều rộng */
            padding-left: 1rem; /* Thêm đệm hai bên */
            padding-right: 1rem;
            flex-wrap: wrap; /* Cho phép các item xuống dòng */
            justify-content: center; /* Căn giữa nội dung bên trong flex container */
        }

        /* Điều chỉnh riêng cho theme-toggle trên màn hình nhỏ */
        .theme-toggle {
             margin-top: 1rem; /* Khoảng cách bên trên */
        }

        /* Đảm bảo cả hai đều hoạt động tốt khi stack */
        .auto-refresh {
            margin-bottom: 1rem; /* Giảm khoảng cách dưới auto-refresh khi stack */
        }

        /* Có thể cần điều chỉnh lại z-index hoặc display nếu stack bị chồng */
        .auto-refresh, .theme-toggle {
            z-index: 1000; /* Đảm bảo chúng ở trên các phần tử khác */
            display: flex;
            justify-content: center; /* Căn giữa nội dung bên trong */
        }
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .card {
        animation: fadeIn 0.5s ease-out;
    }

    .card:nth-child(1) { animation-delay: 0.1s; }
    .card:nth-child(2) { animation-delay: 0.2s; }
    .card:nth-child(3) { animation-delay: 0.3s; }
    .card:nth-child(4) { animation-delay: 0.4s; }
    .card:nth-child(5) { animation-delay: 0.5s; }
    .card:nth-child(6) { animation-delay: 0.6s; }

    /* Scrollbar Styling */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: var(--bg-secondary);
    }

    ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: var(--secondary-color);
    }
    .refresh-btn.mini {
        padding: 0.4rem 0.8rem;
        font-size: 0.9rem;
        border-radius: 12px;
        margin-left: 0.5rem;
        height: 2.2rem;
        width: 2.2rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-sm);
        transition: transform 0.2s ease;
    }

    .refresh-btn.mini:hover {
        transform: scale(1.05);
        box-shadow: var(--shadow-md);
    }

    .refresh-btn.mini:active {
        transform: scale(0.95);
    }
    .apn-select-wrapper {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }
    
    .apn-dropdown {
      padding: 0.4rem 0.6rem;
      font-size: 0.9rem;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      background: var(--bg-card);
      color: var(--text-primary);
      transition: all 0.3s ease;
      box-shadow: var(--shadow-sm);
    }
    
    .apn-dropdown:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.3);
    }
    
    .apn-btn {
      width: 2.2rem;
      height: 2.2rem;
      font-size: 1.2rem;
      line-height: 1;
      padding: 0;
    }
    .ping-value {
      font-weight: bold;
      padding: 2px 8px;
      border-radius: 6px;
      display: inline-block;
      min-width: 60px;
      text-align: center;
    }
    
    .ping-good {
      background-color: #4caf50; /* Xanh lá */
      color: white;
    }
    
    .ping-fair {
      background-color: #ff9800; /* Vàng */
      color: white;
    }
    
    .ping-poor {
      background-color: #f44336; /* Đỏ */
      color: white;
    }
    
    .ping-unreachable {
      background-color: #ddd; /* Xám nhạt */
      color: #666;
    }


</style>
</head>
<body data-theme="dark">
    <div class="auto-refresh">
        <label>
            <input type="checkbox" id="autoRefresh" checked>
            Tự động làm mới (60s)
        </label>
        <div class="retry-count" id="retryCount">Lần thử: 0</div>
        <div class="countdown-timer" id="countdownTimer">Làm mới sau: 60s</div>
    </div>

    <div class="theme-toggle" id="themeToggle">
        <span class="icon">🌙</span>
        <span>Chế độ tối</span>
    </div>
    
    <div class="container">
        <div class="header">
            <h1>Sierra Wireless EM9190</h1>
            <div id="statusBadge" class="status-badge status-loading">Đang tải...</div>
        </div>
        
        <div id="errorMessage" class="error-message" style="display: none;"></div>
        
        <div class="grid">
            <div class="card">
                <h3 data-icon="📡">Thông tin kết nối</h3>
                <div class="info-row">
                    <span class="info-label">Nhà mạng:</span>
                    <span class="info-value" id="operator">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">MCC-MNC:</span>
                    <span class="info-value" id="mccmnc">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Vị trí:</span>
                    <span class="info-value" id="location">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Chế độ:</span>
                    <span class="info-value" id="mode">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Trạng thái:</span>
                    <span class="info-value" id="registration">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Thời gian kết nối:</span>
                    <span class="info-value" id="connTime">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">IP WAN:</span>
                    <span class="info-value" id="ipWan">Đang cập nhật</span>
					<button id="reloadIpBtn" class="refresh-btn mini" title="Lấy lại IP WAN">↻</button>
                </div>
            </div>
            
            <div class="card">
                <h3 data-icon="📱">Thông tin thiết bị</h3>
                <div class="info-row">
                    <span class="info-label">Model:</span>
                    <span class="info-value" id="model">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Firmware:</span>
                    <span class="info-value" id="firmware">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Nhiệt độ:</span>
                    <span class="info-value" id="temp">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">IMEI:</span>
                    <span class="info-value" id="imei">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Port:</span>
                    <span class="info-value" id="port">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">APN Hiện tại:</span>
                    <span class="info-value" id="currentApn">-</span>
                </div>
                <div class="info-row">
                  <span class="info-label">Đổi APN:</span>
                    <span class="info-value apn-select-wrapper">
                      <select id="apnSelector" class="apn-dropdown">
                        <option value="">-- Chọn nhà mạng --</option>
                        <option value="v-internet">Viettel</option>
                        <option value="m3-world">Vinaphone</option>
                        <option value="internet">Mobifone</option>
                      </select>
                      <button onclick="applyApn()" class="refresh-btn mini apn-btn" title="Áp dụng APN">✔</button>
                    </span>
                </div>
            </div>
            
            <div class="card">
                <h3 data-icon="📶">Cường độ tín hiệu</h3>
                <div class="info-row">
                    <span class="info-label">Tín hiệu:</span>
                    <span class="info-value">
                        <div style="display: flex; align-items: center;">
                            <div class="signal-bars" id="signalBars">
                                <div class="signal-bar"></div>
                                <div class="signal-bar"></div>
                                <div class="signal-bar"></div>
                                <div class="signal-bar"></div>
                                <div class="signal-bar"></div>
                            </div>
                            <span class="signal-strength" id="signalPercent">-</span>
                        </div>
                    </span>
                </div>
                <div class="info-row">
                    <span class="info-label">CSQ:</span>
                    <span class="info-value" id="csq">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">RSRP:</span>
                    <span class="info-value" id="rsrp">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">RSRQ:</span>
                    <span class="info-value" id="rsrq">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">RSSI:</span>
                    <span class="info-value" id="rssi">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">SINR:</span>
                    <span class="info-value" id="sinr">-</span>
                </div>
                <div class="info-row">
                  <span class="label">Ping:</span>
                  <span id="pingValue" class="value ping-value">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3 data-icon="📡">Band tần</h3>
                <div class="info-row">
                    <span class="info-label">Band chính:</span>
                    <div class="band-info" id="pband">-</div>
                </div>
                <div class="info-row" id="s1bandRow" style="display: none;">
                    <span class="info-label">Band phụ 1:</span>
                    <div class="band-info" id="s1band">-</div>
                </div>
                <div class="info-row">
                    <span class="info-label">EARFCN:</span>
                    <span class="info-value" id="earfcn">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">PCI:</span>
                    <span class="info-value" id="pci">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3 data-icon="📊">Dữ liệu</h3>
                <div class="info-row">
                    <span class="info-label">Dữ liệu nhận:</span>
                    <span class="info-value" id="rxData">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Dữ liệu gửi:</span>
                    <span class="info-value" id="txData">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">LAC:</span>
                    <span class="info-value" id="lac">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">CID:</span>
                    <span class="info-value" id="cid">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">TAC:</span>
                    <span class="info-value" id="tac">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3 data-icon="💳">Thông tin SIM</h3>
                <div class="info-row">
                    <span class="info-label">IMSI:</span>
                    <span class="info-value" id="imsi">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">ICCID:</span>
                    <span class="info-value" id="iccid">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Protocol:</span>
                    <span class="info-value" id="protocol">-</span>
                </div>
                <!-- THÊM 2 DÒNG SAU -->
                <div class="info-row">
                    <span class="info-label">Tốc độ Rx:</span>
                    <span class="info-value" id="rxSpeed">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Tốc độ Tx:</span>
                    <span class="info-value" id="txSpeed">-</span>
                </div>
            </div>
        </div>
        
        <div class="button-container">
            <button class="refresh-btn" onclick="loadData()">🔄 Làm mới</button>
        </div>
    </div>
    
    <script>
        let autoRefreshInterval;
        let countdownInterval;
        let retryCount = 0;
        let maxRetries = 5;
        let countdown = 60;
        
        const themeToggle = document.getElementById('themeToggle');
        const body = document.body;

        // Function to set the theme
        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            const icon = theme === 'dark' ? '☀️' : '🌙';
            const text = theme === 'dark' ? 'Chế độ sáng' : 'Chế độ tối';
            themeToggle.querySelector('.icon').textContent = icon;
            themeToggle.querySelector('span:last-child').textContent = text;
        }

        // Function to toggle between themes
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            setTheme(newTheme);
        }

        // Event listener for theme toggle
        themeToggle.addEventListener('click', toggleTheme);

        // Initialize theme from local storage or default to dark
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            setTheme(savedTheme);
        } else {
            setTheme('dark'); // Default to dark mode
        }

        function formatBytes(bytes) {
          if (typeof bytes !== "number" || isNaN(bytes)) return "-";
          if (bytes < 1024) return bytes + " B";
          let kb = bytes / 1024;
          if (kb < 1024) return kb.toFixed(2) + " KB";
          let mb = kb / 1024;
          if (mb < 1024) return mb.toFixed(2) + " MB";
          let gb = mb / 1024;
          return gb.toFixed(2) + " GB";
        }

        
        function updateSignalBars(percent) {
            const bars = document.querySelectorAll('.signal-bar');
            const activeCount = Math.ceil(percent / 20);
            
            bars.forEach((bar, index) => {
                if (index < activeCount) {
                    bar.classList.add('active');
                } else {
                    bar.classList.remove('active');
                }
            });
        }
        
        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }
        
        function updateCountdown() {
            const countdownElement = document.getElementById('countdownTimer');
            if (countdown > 0) {
                countdownElement.textContent = `Làm mới sau: ${countdown}s`;
                countdown--;
            } else {
                countdownElement.textContent = 'Đang làm mới...';
                countdown = 60;
            }
        }
        
        function startCountdown() {
            countdown = 60;
            updateCountdown();
            countdownInterval = setInterval(updateCountdown, 1000);
        }
        
        function stopCountdown() {
            if (countdownInterval) {
                clearInterval(countdownInterval);
                countdownInterval = null;
            }
            document.getElementById('countdownTimer').textContent = 'Tắt tự động làm mới';
        }
        
        function loadData() {
            document.getElementById('statusBadge').textContent = 'Đang tải...';
            document.getElementById('statusBadge').className = 'status-badge status-loading';
            
            // Reset countdown when manually refreshing
            if (document.getElementById('autoRefresh').checked) {
                countdown = 60;
                document.getElementById('countdownTimer').textContent = 'Làm mới sau: 60s';
            }
            
            fetch('/cgi-bin/em9190-info')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('HTTP ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    retryCount = 0;
                    document.getElementById('retryCount').textContent = 'Lần thử: 0';
                    
                    if (data.error) {
                        showError('Lỗi: ' + data.error);
                        return;
                    }
                    
                    // Update status
                    const statusBadge = document.getElementById('statusBadge');

                    if (data.ip_wan && data.ip_wan !== '-' && data.status === 'connected') {
                        statusBadge.textContent = 'Đã kết nối';
                        statusBadge.className = 'status-badge status-connected';
                    } else if (data.registration === '5') {
                        statusBadge.textContent = 'Roaming';
                        statusBadge.className = 'status-badge status-connected';
                    } else {
                        statusBadge.textContent = 'Mất kết nối';
                        statusBadge.className = 'status-badge status-disconnected';
                    }
                    // check ping 
                    const ping = data.ping || "-";
                    const quality = data.ping_quality || "unreachable";
                    const pingElem = document.getElementById("pingValue");
                    
                    // Gán giá trị
                    pingElem.textContent = ping !== "-" ? `${ping} ms` : "-";
                    
                    // Reset class
                    pingElem.className = "value ping-value";
                    
                    // Gán class theo chất lượng
                    switch (quality) {
                      case "good":
                        pingElem.classList.add("ping-good");
                        break;
                      case "fair":
                        pingElem.classList.add("ping-fair");
                        break;
                      case "poor":
                        pingElem.classList.add("ping-poor");
                        break;
                      default:
                        pingElem.classList.add("ping-unreachable");
                    }

                    // Update all fields
                    document.getElementById('operator').textContent = data.operator_name || '-';
                    document.getElementById('mccmnc').textContent = data.operator_mcc && data.operator_mnc ? data.operator_mcc + '-' + data.operator_mnc : '-';
                    document.getElementById('location').textContent = data.location || '-';
                    
                    const modeElement = document.getElementById('mode');
                    const mode = data.mode || '-';
                    modeElement.innerHTML = mode.includes('5G') ? 
                        '<span class="mode-5g">' + mode + '</span>' : 
                        '<span class="mode-lte">' + mode + '</span>';
                    
                    const regText = data.registration === '1' ? 'Đã đăng ký' : 
                                   data.registration === '5' ? 'Roaming' : 
                                   data.registration === '0' ? 'Không đăng ký' : 
                                   data.registration === '2' ? 'Đang tìm' : 'Không xác định';
                    document.getElementById('registration').textContent = regText;
                    
                    document.getElementById('connTime').textContent = data.conn_time || '-';
                    document.getElementById('ipWan').textContent = data.ip_wan || '-';
                    document.getElementById('model').textContent = data.modem || '-';
                    document.getElementById('firmware').textContent = data.firmware || '-';
                    document.getElementById('temp').textContent = data.mtemp || '-';
                    document.getElementById('imei').textContent = data.imei || '-';
                    document.getElementById('port').textContent = data.cport || '-';
                    document.getElementById('currentApn').textContent = data.current_apn || '-';
                    
                    // Signal
                    const signalPercent = data.signal || 0;
                    document.getElementById('signalPercent').textContent = signalPercent + '%';
                    updateSignalBars(signalPercent);
                    
                    document.getElementById('csq').textContent = data.csq || '-';
                    document.getElementById('rsrp').textContent = data.rsrp ? data.rsrp + ' dBm' : '-';
                    document.getElementById('rsrq').textContent = data.rsrq ? data.rsrq + ' dB' : '-';
                    document.getElementById('rssi').textContent = data.rssi ? data.rssi + ' dBm' : '-';
                    document.getElementById('sinr').textContent = data.sinr ? data.sinr + ' dB' : '-';
                    
                    // Bands
                    document.getElementById('pband').textContent = data.pband || '-';
                    document.getElementById('earfcn').textContent = data.earfcn || '-';
                    document.getElementById('pci').textContent = data.pci || '-';
                    
                    const s1bandRow = document.getElementById('s1bandRow');
                    if (data.s1band && data.s1band !== '-') {
                        s1bandRow.style.display = 'flex';
                        document.getElementById('s1band').textContent = data.s1band;
                    } else {
                        s1bandRow.style.display = 'none';
                    }
                    
                    // Data
                    const rxData = data.rx_data ?? 0;
                    const txData = data.tx_data ?? 0;
                    
                    document.getElementById("rxData").textContent = formatBytes(data.rx_data ?? 0);
                    document.getElementById("txData").textContent = formatBytes(data.tx_data ?? 0);

                    document.getElementById('lac').textContent = data.lac_dec && data.lac_hex ? data.lac_dec + ' (0x' + data.lac_hex + ')' : '-';
                    document.getElementById('cid').textContent = data.cid_dec && data.cid_hex ? data.cid_dec + ' (0x' + data.cid_hex + ')' : '-';
                    document.getElementById('tac').textContent = data.tac_d && data.tac_h ? data.tac_d + ' (0x' + data.tac_h + ')' : '-';
                    
                    // SIM
                    document.getElementById('imsi').textContent = data.imsi || '-';
                    document.getElementById('iccid').textContent = data.iccid || '-';
                    document.getElementById('protocol').textContent = data.protocol || '-';
                    document.getElementById('rxSpeed').textContent = data.rx_speed; // Sử dụng giá trị đã định dạng
                    document.getElementById('txSpeed').textContent = data.tx_speed; // Sử dụng giá trị đã định dạng
                })
                .catch(error => {
                    console.error('Error:', error);
                    retryCount++;
                    document.getElementById('retryCount').textContent = 'Lần thử: ' + retryCount;
                    
                    if (retryCount >= maxRetries) {
                        document.getElementById('statusBadge').textContent = 'Lỗi kết nối';
                        document.getElementById('statusBadge').className = 'status-badge status-disconnected';
                        showError('Không thể kết nối sau ' + maxRetries + ' lần thử');
                        stopCountdown(); // Stop countdown if max retries reached
                    } else {
                        document.getElementById('statusBadge').textContent = 'Đang thử lại...';
                        document.getElementById('statusBadge').className = 'status-badge status-loading';
                        setTimeout(loadData, 2000);
                    }
                });
        }
        document.getElementById('reloadIpBtn').addEventListener('click', function () {
			const statusBadge = document.getElementById('statusBadge');
			statusBadge.textContent = 'Đang Lấy IP mới...';
			statusBadge.className = 'status-badge status-loading';

			fetch('/cgi-bin/em9190-info?action=restart')
				.then(response => response.json())
				.then(result => {
					if (result.status === 'ok') {
						showError('✅ Lấy lại IP WAN thành công!');
						// Chờ vài giây để modem kết nối lại, rồi load lại dữ liệu
						setTimeout(loadData, 2000);
					} else {
						showError('❌ Không thể lấy IP mới!');
						statusBadge.textContent = 'Mất kết nối';
						statusBadge.className = 'status-badge status-disconnected';
					}
				})
				.catch(error => {
					console.error('Reload error:', error);
					showError('❌ Lỗi kết nối khi reload!');
					statusBadge.textContent = 'Mất kết nối';
					statusBadge.className = 'status-badge status-disconnected';
				});
		});

        function toggleAutoRefresh() {
            const checkbox = document.getElementById('autoRefresh');
            if (checkbox.checked) {
                autoRefreshInterval = setInterval(loadData, 15000); // 15 seconds
                startCountdown();
            } else {
                clearInterval(autoRefreshInterval);
                stopCountdown();
            }
        }
        function updatePingRealtime() {
            fetch('/cgi-bin/ping-info')
                .then(res => res.json())
                .then(data => {
                    const pingElem = document.getElementById("pingValue");
                    const ping = data.ping || "-";
                    const quality = data.quality || "unreachable";
                    
                    pingElem.textContent = ping !== "-" ? `${ping} ms` : "-";
        
                    // Xóa class cũ
                    pingElem.classList.remove("ping-good", "ping-fair", "ping-poor", "ping-unreachable");
        
                    // Gán class mặc định
                    pingElem.classList.add("ping-value");
        
                    // Gán class theo chất lượng
                    switch (quality) {
                        case "good":
                            pingElem.classList.add("ping-good");
                            break;
                        case "fair":
                            pingElem.classList.add("ping-fair");
                            break;
                        case "poor":
                            pingElem.classList.add("ping-poor");
                            break;
                        default:
                            pingElem.classList.add("ping-unreachable");
                    }
                })
                .catch(err => {
                    console.warn("Ping realtime failed", err);
                });
        }
        
        // Khởi động cập nhật mỗi 1 giây (hoặc đổi 3000 nếu cần)
        setInterval(updatePingRealtime, 1000);

        function applyApn() {
            const apn = document.getElementById("apnSelector").value;
            if (!apn) {
                showError("Vui lòng chọn nhà mạng để đặt APN.");
                return;
            }
        
            fetch(`/cgi-bin/em9190-info?action=set_apn&value=${encodeURIComponent(apn)}`)
                .then(response => response.json())
                .then(result => {
                    if (result.status === 'ok') {
                        showError("✅ Đặt APN thành công! Đang khởi động lại...");
                        setTimeout(loadData, 3000); // tải lại sau vài giây
                    } else {
                        showError("❌ Không thể đặt APN.");
                    }
                })
                .catch(err => {
                    console.error("APN error", err);
                    showError("❌ Lỗi khi đặt APN.");
                });
        }
        
        document.getElementById('autoRefresh').addEventListener('change', toggleAutoRefresh);
        
        // Manual refresh button resets countdown
        document.querySelector('.refresh-btn').addEventListener('click', function() {
            if (document.getElementById('autoRefresh').checked) {
                clearInterval(countdownInterval);
                startCountdown();
            }
        });
        
        // Initial load
        loadData();
        toggleAutoRefresh();
    </script>
</body>
</html>
